input {
  file {
    path => "/var/log/mylogfile.log"  # Remplace par ton chemin de log
    start_position => "beginning"
    codec => multiline {
      pattern => "^\s+at\s+|Caused by:"
      negate => "true"
      what => "previous"
    }
  }
}

filter {
  # GROK pour les logs avec séparateurs "pipe"
  grok {
    match => {
      "message" => "^%{TIMESTAMP_ISO8601:timestamp}\|%{WORD:log_level}\|\|%{DATA:module}\|\|\|%{DATA:class}\|%{GREEDYDATA:message}$"
    }
  }

  # GROK pour les stack traces Java regroupées par le codec "multiline"
  if [message] =~ "Exception" {
    grok {
      match => {
        "message" => "(?m)^(?<exception>[\w\.]+Exception): (?<exception_message>.*?)(\n\s+at\s+.*)+"
      }
    }
  }

  # Nettoyage des champs vides
  mutate {
    remove_field => [ "host", "@version", "path" ]
  }

  # Conversion du timestamp en format ISO8601 propre
  date {
    match => [ "timestamp", "ISO8601" ]
    timezone => "Europe/Paris"
  }
}

output {
  file {
    path => "/var/log/logstash_output.json"
    codec => json_lines
  }
}
